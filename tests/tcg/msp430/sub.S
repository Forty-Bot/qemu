; SPDX-License-Identifier: GPL-2.0-or-later
; Copyright (C) 2024 Sean Anderson <seanga2@gmail.com>

#include <msp430.h>

#include "macros.S"

.macro test_sub arg1, arg2, exp, sr
    test_op2_single sub, \arg1, \arg2, check, setup, \exp, \sr
    test_op2_single cmp, \arg1, \arg2, check, setup, \arg2, \sr
    test_op2_single subc, \arg1, \arg2, check, setupc, \exp, \sr, 1
.endm

.macro test_subc arg1, arg2, exp, sr
    test_op2_single subc, \arg1, \arg2, check, setupc, \exp, \sr, 0
.endm

.macro test_subb_raw arg1, arg2, exp, sr
    test_op2_single sub.b, \arg1, \arg2, check, setup, \exp, \sr
    test_op2_single cmp.b, \arg1, \arg2, check, setup, \arg2, \sr
    test_op2_single subc.b, \arg1, \arg2, check, setupc, \exp, \sr, 1
.endm

.macro test_subb arg1, arg2, exp, sr
    test_subb_raw \arg1 | 0xff00, \arg2 | 0xff00, \exp, \sr
.endm

.macro test_subcb arg1, arg2, exp, sr
    test_op2_single subc.b, \arg1 | 0xff00, \arg2 | 0xff00, check, setupc, \exp, \sr, 0
.endm

.global main
main:
    mov #414, r12
    call #plan

    ; SR/CG immediates
    test_sub 0, 0, 0, Z | C
    test_sub 1, 0, -1, N
    test_sub 2, 0, -2, N
    test_sub 4, 0, -4, N
    test_sub 8, 0, -8, N
    test_sub -1, 0, 1, 0

    ; NB: N xor Z
    ; NB: Z implies C
    ; NV: V implies C xor N

    test_sub 0x0001, 0x0001, 0x0000, Z | C
    test_sub 0x0007, 0x0003, 0xfffc, N

    test_sub 0xff80, 0x0000, 0x0080, 0
    test_sub 0x0000, 0x8000, 0x8000, N | C
    test_sub 0xff80, 0x8000, 0x8080, N

    test_sub 0x007f, 0x0000, 0xff81, N
    test_sub 0x0000, 0x7fff, 0x7fff, C
    test_sub 0x007f, 0x7fff, 0x7f80, C

    test_sub 0x007f, 0x8000, 0x7f81, V | C
    test_sub 0xff80, 0x7fff, 0x807f, V | N

    test_sub 0xffff, 0x0000, 0x0001, 0
    test_sub 0x0000, 0xffff, 0xffff, N | C
    test_sub 0xffff, 0xffff, 0x0000, Z | C

    test_sub 0x7fff, 0x0001, 0x8002, N
    test_sub 0x0001, 0xffff, 0xfffe, N | C
    test_sub 0x8000, 0x8000, 0x0000, Z | C

    ; The strategy is to use the tests from above but modified like
    ; (a - 1) + b = c
    ; a + (b + 1) = c
    ; a + b = c - 1
    ; Redundant tests have been removed

    test_subc 0xffff, 0x0000, 0x0000, Z
    test_subc 0x0000, 0x0001, 0x0000, Z | C
    test_subc 0x0000, 0x0000, 0xffff, N

    test_subc 0x0001, 0x0002, 0x0000, Z | C
    test_subc 0x0001, 0x0001, 0xffff, N

    test_subc 0x0006, 0x0003, 0xfffc, N
    test_subc 0x0007, 0x0004, 0xfffc, N
    test_subc 0x0007, 0x0003, 0xfffb, N

    test_subc 0xff7f, 0x0000, 0x0080, 0
    test_subc 0xff80, 0x0001, 0x0080, 0
    test_subc 0xff80, 0x0000, 0x007f, 0

    test_subc 0xffff, 0x8000, 0x8000, N
    test_subc 0x0000, 0x8001, 0x8000, N | C
    test_subc 0x0000, 0x8000, 0x7fff, V | C

    test_subc 0xff7f, 0x8000, 0x8080, N
    test_subc 0xff80, 0x8001, 0x8080, N
    test_subc 0xff80, 0x8000, 0x807f, N

    test_subc 0x007e, 0x0000, 0xff81, N
    test_subc 0x007f, 0x0001, 0xff81, N
    test_subc 0x007f, 0x0000, 0xff80, N

    test_subc 0xffff, 0x7fff, 0x7fff, 0
    test_subc 0x0000, 0x7fff, 0x7ffe, C

    test_subc 0x007e, 0x7fff, 0x7f80, C
    test_subc 0x007f, 0x8000, 0x7f80, V | C
    test_subc 0x007f, 0x7fff, 0x7f7f, C

    test_subc 0x007e, 0x8000, 0x7f81, V | C
    test_subc 0x007f, 0x8001, 0x7f81, V | C

    test_subc 0xff7f, 0x7fff, 0x807f, V | N
    test_subc 0xff80, 0x7fff, 0x807e, V | N

    test_subc 0xfffe, 0x0000, 0x0001, 0
    test_subc 0xffff, 0x0001, 0x0001, 0

    test_subc 0xffff, 0xffff, 0xffff, N
    test_subc 0x0000, 0xffff, 0xfffe, N | C

    test_subc 0xfffe, 0xffff, 0x0000, Z | C

    test_subc 0x7ffe, 0x0001, 0x8002, N
    test_subc 0x7fff, 0x0002, 0x8002, N
    test_subc 0x7fff, 0x0001, 0x8001, N

    test_subc 0x0001, 0x0000, 0xfffe, N
    test_subc 0x0001, 0xffff, 0xfffd, N | C

    test_subc 0x7fff, 0x8000, 0x0000, V | Z | C
    test_subc 0x8000, 0x8001, 0x0000, Z | C
    test_subc 0x8000, 0x8000, 0xffff, N

    ; And now for the byte variants

    test_subb_raw 0, 0, 0, Z | C
    test_subb_raw 1, 0, 0xff, N
    test_subb_raw 2, 0, 0xfe, N
    test_subb_raw 4, 0, 0xfc, N
    test_subb_raw 8, 0, 0xf8, N
    test_subb_raw -1, 0, 1, 0

    ; Generally the interesting patterns are shifted right 8 bits

    test_subb 0x01, 0x01, 0x00, Z | C
    test_subb 0x07, 0x03, 0xfc, N

    test_subb 0xf8, 0x00, 0x08, 0
    test_subb 0x00, 0x80, 0x80, N | C
    test_subb 0xf8, 0x80, 0x88, N

    test_subb 0x07, 0x00, 0xf9, N
    test_subb 0x00, 0x7f, 0x7f, C
    test_subb 0x07, 0x7f, 0x78, C

    test_subb 0x07, 0x80, 0x79, V | C
    test_subb 0xf8, 0x7f, 0x87, V | N

    test_subb 0xff, 0x00, 0x01, 0
    test_subb 0x00, 0xff, 0xff, N | C
    test_subb 0xff, 0xff, 0x00, Z | C

    test_subb 0x7f, 0x01, 0x82, N
    test_subb 0x01, 0xff, 0xfe, N | C
    test_subb 0x80, 0x80, 0x00, Z | C

    ; And now with carry

    test_subcb 0xff, 0x00, 0x00, Z
    test_subcb 0x00, 0x01, 0x00, Z | C
    test_subcb 0x00, 0x00, 0xff, N

    test_subcb 0x01, 0x02, 0x00, Z | C
    test_subcb 0x01, 0x01, 0xff, N

    test_subcb 0x06, 0x03, 0xfc, N
    test_subcb 0x07, 0x04, 0xfc, N
    test_subcb 0x07, 0x03, 0xfb, N

    test_subcb 0xf7, 0x00, 0x08, 0
    test_subcb 0xf8, 0x01, 0x08, 0
    test_subcb 0xf8, 0x00, 0x07, 0

    test_subcb 0xff, 0x80, 0x80, N
    test_subcb 0x00, 0x81, 0x80, N | C
    test_subcb 0x00, 0x80, 0x7f, V | C

    test_subcb 0xf7, 0x80, 0x88, N
    test_subcb 0xf8, 0x81, 0x88, N
    test_subcb 0xf8, 0x80, 0x87, N

    test_subcb 0x06, 0x00, 0xf9, N
    test_subcb 0x07, 0x01, 0xf9, N
    test_subcb 0x07, 0x00, 0xf8, N

    test_subcb 0xff, 0x7f, 0x7f, 0
    test_subcb 0x00, 0x7f, 0x7e, C

    test_subcb 0x06, 0x7f, 0x78, C
    test_subcb 0x07, 0x80, 0x78, V | C
    test_subcb 0x07, 0x7f, 0x77, C

    test_subcb 0x06, 0x80, 0x79, V | C
    test_subcb 0x07, 0x81, 0x79, V | C

    test_subcb 0xf7, 0x7f, 0x87, V | N
    test_subcb 0xf8, 0x7f, 0x86, V | N

    test_subcb 0xfe, 0x00, 0x01, 0
    test_subcb 0xff, 0x01, 0x01, 0

    test_subcb 0xff, 0xff, 0xff, N
    test_subcb 0x00, 0xff, 0xfe, N | C

    test_subcb 0xfe, 0xff, 0x00, Z | C

    test_subcb 0x7e, 0x01, 0x82, N
    test_subcb 0x7f, 0x02, 0x82, N
    test_subcb 0x7f, 0x01, 0x81, N

    test_subcb 0x01, 0x00, 0xfe, N
    test_subcb 0x01, 0xff, 0xfd, N | C

    test_subcb 0x7f, 0x80, 0x00, V | Z | C
    test_subcb 0x80, 0x81, 0x00, Z | C
    test_subcb 0x80, 0x80, 0xff, N

test_sub_modes:
    setup 0xddcc, N
    test_op2_modes sub, 0xccde, 0xaaaa, check

test_cmp_modes:
    setup 0xaaaa, N
    test_op2_modes cmp, 0xccde, 0xaaaa, check

test_subc_modes:
    setup 0xddcb, N
    test_op2_modes subc, 0xccde, 0xaaaa, check, clear_carry

test_subb_modes:
    setupb 0x00cc, 0xaacc, N
    test_op2_modes sub.b, 0xccde, 0xaaaa, checkb, incr=1

test_cmpb_modes:
    setup 0xaaaa, N
    test_op2_modes cmp.b, 0xccde, 0xaaaa, check, incr=1

test_subcb_modes:
    setupb 0x00cb, 0xaacb, N
    test_op2_modes subc.b, 0xccde, 0xaaaa, checkb, clear_carry, incr=1

    mov #0, r12
    call #exit
