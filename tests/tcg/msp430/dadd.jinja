; SPDX-License-Identifier: GPL-2.0-or-later
; Copyright (C) 2024 Sean Anderson <seanga2@gmail.com>

#include <msp430.h>

{% from "macros.jinja" import check, checkb, setup, setupb, setupc, clear_carry -%}
{% from "macros.jinja" import test_op2_single, test_op2_modes -%}
{% from "macros.jinja" import check_helpers, main -%}

{{ check_helpers }}

{% macro checkd(direct, incr) %}
    mov.b r2, r2
{{ check(direct, incr) }}
{%- endmacro -%}

{% macro test_dadd(arg1, arg2, exp, sr) %}
{{ test_op2_single("dadd", arg1, arg2, checkd, setupc, exp, sr, 0) }}
{%- endmacro -%}

{% macro test_daddc(arg1, arg2, exp, sr) %}
{{ test_op2_single("dadd", arg1, arg2, checkd, setupc, exp, sr, 1) }}
{%- endmacro -%}

{% macro test_daddb_raw(arg1, arg2, exp, sr) %}
{{ test_op2_single("dadd.b", arg1, arg2, check, setupc, exp, sr, 0) }}
{%- endmacro -%}

{% macro test_daddb(arg1, arg2, exp, sr) %}
{{ test_daddb_raw(arg1 | ext1, arg2 | ext1, exp, sr) }}
{%- endmacro -%}

{% macro test_daddbc(arg1, arg2, exp, sr) %}
{{ test_op2_single("dadd.b", arg1 | ext1, arg2 | ext1, check, setupc, exp, sr, 1) }}
{%- endmacro -%}

{% call main() %}
; dadd behavior for non-BCD numbers is not defined, so we don't test it
; TODO: maybe we need to emulate this?

; SR/CG immediates
{{ test_dadd(0, 0, 0, Z) }}
{{ test_dadd(1, 0, 1, 0) }}
{{ test_dadd(2, 0, 2, 0) }}
{{ test_dadd(4, 0, 4, 0) }}
{{ test_dadd(8, 0, 8, 0) }}

{{ test_dadd(0x0001, 0x0001, 0x0002, 0) }}
{{ test_dadd(0x0007, 0x0003, 0x0010, 0) }}

{{ test_dadd(0x9950, 0x0000, 0x9950, N) }}
{{ test_dadd(0x0000, 0x5000, 0x5000, 0) }}
{{ test_dadd(0x9950, 0x5000, 0x4950, C) }}

{{ test_dadd(0x0049, 0x0000, 0x0049, 0) }}
{{ test_dadd(0x0000, 0x4999, 0x4999, 0) }}
{{ test_dadd(0x0049, 0x4999, 0x5048, 0) }}

{{ test_dadd(0x0049, 0x5000, 0x5049, 0) }}
{{ test_dadd(0x9950, 0x4999, 0x4949, C) }}

{{ test_dadd(0x9999, 0x0000, 0x9999, N) }}
{{ test_dadd(0x0000, 0x9999, 0x9999, N) }}
{{ test_dadd(0x9999, 0x9999, 0x9998, N + C) }}

{{ test_dadd(0x4999, 0x0001, 0x5000, 0) }}
{{ test_dadd(0x0001, 0x9999, 0x0000, Z + C) }}
{{ test_dadd(0x5000, 0x5000, 0x0000, Z + C) }}

{{ test_dadd(0x3433, 0x4567, 0x8000, N) }}
{{ test_dadd(0x3432, 0x4567, 0x7999, 0) }}

; The strategy is to use the tests from above but modified like
; (a - 1) + b = c
; a + (b - 1) = c
; a + b = c + 1
; Redundant tests have been removed
{{ test_daddc(0x9999, 0x0000, 0x0000, Z + C) }}
{{ test_daddc(0x0000, 0x9999, 0x0000, Z+ C) }}
{{ test_daddc(0x0000, 0x0000, 0x0001, 0) }}

{{ test_daddc(0x0000, 0x0001, 0x0002, 0) }}
{{ test_daddc(0x0001, 0x0000, 0x0002, 0) }}
{{ test_daddc(0x0001, 0x0001, 0x0003, 0) }}

{{ test_daddc(0x0006, 0x0003, 0x0010, 0) }}
{{ test_daddc(0x0007, 0x0002, 0x0010, 0) }}
{{ test_daddc(0x0007, 0x0003, 0x0011, 0) }}

{{ test_daddc(0x9949, 0x0000, 0x9950, N) }}
{{ test_daddc(0x9950, 0x9999, 0x9950, N + C) }}
{{ test_daddc(0x9950, 0x0000, 0x9951, N) }}

{{ test_daddc(0x9999, 0x5000, 0x5000, C) }}
{{ test_daddc(0x0000, 0x4999, 0x5000, 0) }}
{{ test_daddc(0x0000, 0x5000, 0x5001, 0) }}

{{ test_daddc(0x9949, 0x5000, 0x4950, C) }}
{{ test_daddc(0x9950, 0x4999, 0x4950, C) }}
{{ test_daddc(0x9950, 0x5000, 0x4951, C) }}

{{ test_daddc(0x0048, 0x0000, 0x0049, 0) }}
{{ test_daddc(0x0049, 0x9999, 0x0049, C) }}
{{ test_daddc(0x0049, 0x0000, 0x0050, 0) }}

{{ test_daddc(0x9999, 0x4999, 0x4999, C) }}
{{ test_daddc(0x0000, 0x4998, 0x4999, 0) }}

{{ test_daddc(0x0048, 0x4999, 0x5048, 0) }}
{{ test_daddc(0x0049, 0x4998, 0x5048, 0) }}
{{ test_daddc(0x0049, 0x4999, 0x5049, 0) }}

{{ test_daddc(0x0048, 0x5000, 0x5049, 0) }}
{{ test_daddc(0x0049, 0x5000, 0x5050, 0) }}

{{ test_daddc(0x9949, 0x4999, 0x4949, C) }}
{{ test_daddc(0x9950, 0x4998, 0x4949, C) }}

{{ test_daddc(0x9998, 0x0000, 0x9999, N) }}
{{ test_daddc(0x9999, 0x9999, 0x9999, N + C) }}

{{ test_daddc(0x0000, 0x9998, 0x9999, N) }}
{{ test_daddc(0x0000, 0x9999, 0x0000, Z + C) }}

{{ test_daddc(0x9998, 0x9999, 0x9998, N + C) }}
{{ test_daddc(0x9999, 0x9998, 0x9998, N + C) }}

{{ test_daddc(0x4998, 0x0001, 0x5000, 0) }}
{{ test_daddc(0x4999, 0x0000, 0x5000, 0) }}
{{ test_daddc(0x4999, 0x0001, 0x5001, 0) }}

{{ test_daddc(0x0001, 0x9998, 0x0000, Z + C) }}
{{ test_daddc(0x0001, 0x9999, 0x0001, C) }}

{{ test_daddc(0x4999, 0x5000, 0x0000, Z + C) }}
{{ test_daddc(0x5000, 0x4999, 0x0000, Z + C) }}
{{ test_daddc(0x5000, 0x5000, 0x0001, C) }}

{{ test_daddc(0x3432, 0x4567, 0x8000, N) }}
{{ test_daddc(0x3433, 0x4566, 0x8000, N) }}
{{ test_daddc(0x3433, 0x4567, 0x8001, N) }}

{{ test_daddc(0x3431, 0x4567, 0x7999, 0) }}
{{ test_daddc(0x3432, 0x4566, 0x7999, 0) }}

; And now for the byte variants

{{ test_daddb_raw(0, 0, 0, Z) }}
{{ test_daddb_raw(1, 0, 1, 0) }}
{{ test_daddb_raw(2, 0, 2, 0) }}
{{ test_daddb_raw(4, 0, 4, 0) }}
{{ test_daddb_raw(8, 0, 8, 0) }}

{{ test_daddb(0x01, 0x01, 0x02, 0) }}
{{ test_daddb(0x07, 0x03, 0x10, 0) }}

{{ test_daddb(0x95, 0x00, 0x95, N) }}
{{ test_daddb(0x00, 0x50, 0x50, 0) }}
{{ test_daddb(0x95, 0x50, 0x45, C) }}

{{ test_daddb(0x04, 0x00, 0x04, 0) }}
{{ test_daddb(0x00, 0x49, 0x49, 0) }}
{{ test_daddb(0x04, 0x49, 0x53, 0) }}

{{ test_daddb(0x04, 0x50, 0x54, 0) }}
{{ test_daddb(0x95, 0x49, 0x44, C) }}

{{ test_daddb(0x99, 0x00, 0x99, N) }}
{{ test_daddb(0x00, 0x99, 0x99, N) }}
{{ test_daddb(0x99, 0x99, 0x98, N + C) }}

{{ test_daddb(0x49, 0x01, 0x50, 0) }}
{{ test_daddb(0x01, 0x99, 0x00, Z + C) }}
{{ test_daddb(0x50, 0x50, 0x00, Z + C) }}

{{ test_daddb(0x33, 0x47, 0x80, N) }}
{{ test_daddb(0x32, 0x47, 0x79, 0) }}

; The strategy is to use the tests from above but modified like
; (a - 1) + b = c
; a + (b - 1) = c
; a + b = c + 1
; Redundant tests have been removed

{{ test_daddbc(0x99, 0x00, 0x00, Z + C) }}
{{ test_daddbc(0x00, 0x99, 0x00, Z+ C) }}
{{ test_daddbc(0x00, 0x00, 0x01, 0) }}

{{ test_daddbc(0x00, 0x01, 0x02, 0) }}
{{ test_daddbc(0x01, 0x00, 0x02, 0) }}
{{ test_daddbc(0x01, 0x01, 0x03, 0) }}

{{ test_daddbc(0x06, 0x03, 0x10, 0) }}
{{ test_daddbc(0x07, 0x02, 0x10, 0) }}
{{ test_daddbc(0x07, 0x03, 0x11, 0) }}

{{ test_daddbc(0x94, 0x00, 0x95, N) }}
{{ test_daddbc(0x95, 0x99, 0x95, N + C) }}
{{ test_daddbc(0x95, 0x00, 0x96, N) }}

{{ test_daddbc(0x99, 0x50, 0x50, C) }}
{{ test_daddbc(0x00, 0x49, 0x50, 0) }}
{{ test_daddbc(0x00, 0x50, 0x51, 0) }}

{{ test_daddbc(0x94, 0x50, 0x45, C) }}
{{ test_daddbc(0x95, 0x49, 0x45, C) }}
{{ test_daddbc(0x95, 0x50, 0x46, C) }}

{{ test_daddbc(0x03, 0x00, 0x04, 0) }}
{{ test_daddbc(0x04, 0x99, 0x04, C) }}
{{ test_daddbc(0x04, 0x00, 0x05, 0) }}

{{ test_daddbc(0x99, 0x49, 0x49, C) }}
{{ test_daddbc(0x00, 0x48, 0x49, 0) }}

{{ test_daddbc(0x03, 0x49, 0x53, 0) }}
{{ test_daddbc(0x04, 0x48, 0x53, 0) }}
{{ test_daddbc(0x04, 0x49, 0x54, 0) }}

{{ test_daddbc(0x03, 0x50, 0x54, 0) }}
{{ test_daddbc(0x04, 0x50, 0x55, 0) }}

{{ test_daddbc(0x94, 0x49, 0x44, C) }}
{{ test_daddbc(0x95, 0x48, 0x44, C) }}

{{ test_daddbc(0x98, 0x00, 0x99, N) }}
{{ test_daddbc(0x99, 0x99, 0x99, N + C) }}

{{ test_daddbc(0x00, 0x98, 0x99, N) }}
{{ test_daddbc(0x00, 0x99, 0x00, Z + C) }}

{{ test_daddbc(0x98, 0x99, 0x98, N + C) }}
{{ test_daddbc(0x99, 0x98, 0x98, N + C) }}

{{ test_daddbc(0x48, 0x01, 0x50, 0) }}
{{ test_daddbc(0x49, 0x00, 0x50, 0) }}
{{ test_daddbc(0x49, 0x01, 0x51, 0) }}

{{ test_daddbc(0x01, 0x98, 0x00, Z + C) }}
{{ test_daddbc(0x01, 0x99, 0x01, C) }}

{{ test_daddbc(0x49, 0x50, 0x00, Z + C) }}
{{ test_daddbc(0x50, 0x49, 0x00, Z + C) }}
{{ test_daddbc(0x50, 0x50, 0x01, C) }}

{{ test_daddbc(0x32, 0x47, 0x80, N) }}
{{ test_daddbc(0x33, 0x46, 0x80, N) }}
{{ test_daddbc(0x33, 0x47, 0x81, N) }}

{{ test_daddbc(0x31, 0x47, 0x79, 0) }}
{{ test_daddbc(0x32, 0x46, 0x79, 0) }}

test_add_modes:
{{ setup(0x6666, C) }}
{{ test_op2_modes("dadd", 0x8878, 0x7788, check, clear_carry) }}

test_addb_modes:
{{ setupb(0x0066, 0x7766, C) }}
{{ test_op2_modes("dadd.b", 0x8878, 0x7788, checkb, clear_carry, incr=1) }}
{%- endcall %}
