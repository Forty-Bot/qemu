; SPDX-License-Identifier: GPL-2.0-or-later
; Copyright (C) 2024 Sean Anderson <seanga2@gmail.com>

#include <msp430.h>

#include "macros.S"

.macro test_add arg1, arg2, exp, sr
    test_op2_single add, \arg1, \arg2, check, setup, \exp, \sr
    test_op2_single addc, \arg1, \arg2, check, setupc, \exp, \sr, 0
.endm

.macro test_addc arg1, arg2, exp, sr
    test_op2_single addc, \arg1, \arg2, check, setupc, \exp, \sr, 1
.endm

.macro test_addb_raw arg1, arg2, exp, sr
    test_op2_single add.b, \arg1, \arg2, check, setup, \exp, \sr
    test_op2_single addc.b, \arg1, \arg2, check, setupc, \exp, \sr, 0
.endm

.macro test_addb arg1, arg2, exp, sr
    test_addb_raw \arg1 | 0xff00, \arg2 | 0xff00, \exp, \sr
.endm

.macro test_addcb arg1, arg2, exp, sr
    test_op2_single addc.b, \arg1 | 0xff00, \arg2 | 0xff00, check, setupc, \exp, \sr, 1
.endm

.global main
main:
    mov #308, r12
    call #plan

    ; SR/CG immediates
    test_add 0, 0, 0, Z
    test_add 1, 0, 1, 0
    test_add 2, 0, 2, 0
    test_add 4, 0, 4, 0
    test_add 8, 0, 8, 0
    test_add -1, 0, -1, N

    ; NB: N xor Z
    ; NB: V implies N xor C

    test_add 0x0001, 0x0001, 0x0002, 0
    test_add 0x0007, 0x0003, 0x000a, 0

    test_add 0xff80, 0x0000, 0xff80, N
    test_add 0x0000, 0x8000, 0x8000, N
    test_add 0xff80, 0x8000, 0x7f80, V | C

    test_add 0x007f, 0x0000, 0x007f, 0
    test_add 0x0000, 0x7fff, 0x7fff, 0
    test_add 0x007f, 0x7fff, 0x807e, V | N

    test_add 0x007f, 0x8000, 0x807f, N
    test_add 0xff80, 0x7fff, 0x7f7f, C

    test_add 0xffff, 0x0000, 0xffff, N
    test_add 0x0000, 0xffff, 0xffff, N
    test_add 0xffff, 0xffff, 0xfffe, N | C

    test_add 0x7fff, 0x0001, 0x8000, V | N
    test_add 0x0001, 0xffff, 0x0000, Z | C
    test_add 0x8000, 0x8000, 0x0000, V | Z | C

    ; The strategy is to use the tests from above but modified like
    ; (a - 1) + b = c
    ; a + (b - 1) = c
    ; a + b = c + 1
    ; Redundant tests have been removed

    test_addc 0x0000, 0xffff, 0x0000, Z | C
    test_addc 0xffff, 0x0000, 0x0000, Z | C
    test_addc 0x0000, 0x0000, 0x0001, 0

    test_addc 0x0001, 0x0000, 0x0002, 0
    test_addc 0x0000, 0x0001, 0x0002, 0
    test_addc 0x0001, 0x0001, 0x0003, 0

    test_addc 0x0007, 0x0002, 0x000a, 0
    test_addc 0x0006, 0x0003, 0x000a, 0
    test_addc 0x0007, 0x0003, 0x000b, 0

    test_addc 0xff80, 0xffff, 0xff80, N | C
    test_addc 0xff7f, 0x0000, 0xff80, N
    test_addc 0xff80, 0x0000, 0xff81, N

    test_addc 0x0000, 0x7fff, 0x8000, V | N
    test_addc 0xffff, 0x8000, 0x8000, N | C
    test_addc 0x0000, 0x8000, 0x8001, N

    test_addc 0xff80, 0x7fff, 0x7f80, C
    test_addc 0xff7f, 0x8000, 0x7f80, V | C
    test_addc 0xff80, 0x8000, 0x7f81, V | C

    test_addc 0x007f, 0xffff, 0x007f, C
    test_addc 0x007e, 0x0000, 0x007f, 0
    test_addc 0x007f, 0x0000, 0x0080, 0

    test_addc 0x0000, 0x7ffe, 0x7fff, 0
    test_addc 0xffff, 0x7fff, 0x7fff, C

    test_addc 0x007f, 0x7ffe, 0x807e, V | N
    test_addc 0x007e, 0x7fff, 0x807e, V | N
    test_addc 0x007f, 0x7fff, 0x807f, V | N

    test_addc 0x007e, 0x8000, 0x807f, N
    test_addc 0x007f, 0x8000, 0x8080, N

    test_addc 0xff80, 0x7ffe, 0x7f7f, C
    test_addc 0xff7f, 0x7fff, 0x7f7f, C

    test_addc 0xffff, 0xffff, 0xffff, N | C
    test_addc 0xfffe, 0x0000, 0xffff, N

    test_addc 0x0000, 0xfffe, 0xffff, N

    test_addc 0xffff, 0xfffe, 0xfffe, N | C
    test_addc 0xfffe, 0xffff, 0xfffe, N | C

    test_addc 0x7fff, 0x0000, 0x8000, V | N
    test_addc 0x7ffe, 0x0001, 0x8000, V | N
    test_addc 0x7fff, 0x0001, 0x8001, V | N

    test_addc 0x0001, 0xfffe, 0x0000, Z | C
    test_addc 0x0001, 0xffff, 0x0001, C

    test_addc 0x8000, 0x7fff, 0x0000, Z | C
    test_addc 0x7fff, 0x8000, 0x0000, Z | C
    test_addc 0x8000, 0x8000, 0x0001, V | C

    ; And now for the byte variants

    test_addb_raw 0, 0, 0, Z
    test_addb_raw 1, 0, 1, 0
    test_addb_raw 2, 0, 2, 0
    test_addb_raw 4, 0, 4, 0
    test_addb_raw 8, 0, 8, 0
    test_addb_raw -1, 0, 0xff, N

    test_addb 0x00, 0x00, 0x00, Z
    test_addb 0x01, 0x01, 0x02, 0
    test_addb 0x07, 0x03, 0x0a, 0

    test_addb 0xf8, 0x00, 0xf8, N
    test_addb 0x00, 0x80, 0x80, N
    test_addb 0xf8, 0x80, 0x78, V | C

    test_addb 0x07, 0x00, 0x07, 0
    test_addb 0x00, 0x7f, 0x7f, 0
    test_addb 0x07, 0x7f, 0x86, V | N

    test_addb 0x07, 0x80, 0x87, N
    test_addb 0xf8, 0x7f, 0x77, C

    test_addb 0xff, 0x00, 0xff, N
    test_addb 0x00, 0xff, 0xff, N
    test_addb 0xff, 0xff, 0xfe, N | C

    test_addb 0x7f, 0x01, 0x80, V | N
    test_addb 0x01, 0xff, 0x00, Z | C
    test_addb 0x80, 0x80, 0x00, V | Z | C

    ; And now with carry

    test_addcb 0x00, 0xff, 0x00, Z | C
    test_addcb 0xff, 0x00, 0x00, Z | C
    test_addcb 0x00, 0x00, 0x01, 0

    test_addcb 0x01, 0x00, 0x02, 0
    test_addcb 0x00, 0x01, 0x02, 0
    test_addcb 0x01, 0x01, 0x03, 0

    test_addcb 0x07, 0x02, 0x0a, 0
    test_addcb 0x06, 0x03, 0x0a, 0
    test_addcb 0x07, 0x03, 0x0b, 0

    test_addcb 0xf8, 0xff, 0xf8, N | C
    test_addcb 0xf7, 0x00, 0xf8, N
    test_addcb 0xf8, 0x00, 0xf9, N

    test_addcb 0x00, 0x7f, 0x80, V | N
    test_addcb 0xff, 0x80, 0x80, N | C
    test_addcb 0x00, 0x80, 0x81, N

    test_addcb 0xf8, 0x7f, 0x78, C
    test_addcb 0xf7, 0x80, 0x78, V | C
    test_addcb 0xf8, 0x80, 0x79, V | C

    test_addcb 0x07, 0xff, 0x07, C
    test_addcb 0x06, 0x00, 0x07, 0
    test_addcb 0x07, 0x00, 0x08, 0

    test_addcb 0x00, 0x7e, 0x7f, 0
    test_addcb 0xff, 0x7f, 0x7f, C

    test_addcb 0x07, 0x7e, 0x86, V | N
    test_addcb 0x06, 0x7f, 0x86, V | N
    test_addcb 0x07, 0x7f, 0x87, V | N

    test_addcb 0x06, 0x80, 0x87, N
    test_addcb 0x07, 0x80, 0x88, N

    test_addcb 0xf8, 0x7e, 0x77, C
    test_addcb 0xf7, 0x7f, 0x77, C

    test_addcb 0xff, 0xff, 0xff, N | C
    test_addcb 0xfe, 0x00, 0xff, N

    test_addcb 0x00, 0xfe, 0xff, N

    test_addcb 0xff, 0xfe, 0xfe, N | C
    test_addcb 0xfe, 0xff, 0xfe, N | C

    test_addcb 0x7f, 0x00, 0x80, V | N
    test_addcb 0x7e, 0x01, 0x80, V | N
    test_addcb 0x7f, 0x01, 0x81, V | N

    test_addcb 0x01, 0xfe, 0x00, Z | C
    test_addcb 0x01, 0xff, 0x01, C

    test_addcb 0x80, 0x7f, 0x00, Z | C
    test_addcb 0x7f, 0x80, 0x00, Z | C
    test_addcb 0x80, 0x80, 0x01, V | C

    ; TODO: autoincrement_direct_same

test_add_modes:
    setup 0xaaaa, N | C
    test_op2_modes add, 0xccde, 0xddcc, check

test_addc_modes:
    setup 0xaaab, N | C
    test_op2_modes addc, 0xccde, 0xddcc, check, set_carry

test_addb_modes:
    setupb 0x00aa, 0xddaa, N | C
    test_op2_modes add.b, 0xccde, 0xddcc, checkb, incr=1

test_addcb_modes:
    setupb 0x00ab, 0xddab, N | C
    test_op2_modes addc.b, 0xccde, 0xddcc, checkb, set_carry, incr=1

    mov #0, r12
    call #exit
